{
  "version": 3,
  "sources": ["console-reporter.js", "runner.js"],
  "sourcesContent": ["export default {\r\n\r\n    jasmineStarted(suiteInfo) {\r\n        console.group(\"jasmine: started\", suiteInfo);\r\n    },\r\n\r\n    suiteStarted(result) {\r\n        console.group(`jasmine suite: ${result.fullName} %c...`, \"color: gray\");\r\n    },\r\n\r\n    specStarted(result) {\r\n        console.log(`jasmine spec: ${result.description} %c...`, \"color: gray\");\r\n    },\r\n\r\n    specDone({failedExpectations, description, passedExpectations, pendingReason, status}) {\r\n        if (status === \"pending\") {\r\n            console.log(\r\n                `jasmine spec: ${description}%c - %cPENDING%c because ${pendingReason}`,\r\n                \"color: gray\",\r\n                \"color: orange\",\r\n                \"color: auto\"\r\n            );\r\n        } else {\r\n            console.log(\r\n                `jasmine spec: ${\r\n                    description\r\n                }%c - %c${passedExpectations.length} PASSED%c, %c${failedExpectations.length} FAILED`,\r\n                \"color: gray\",\r\n                \"color: green\",\r\n                \"color: gray\",\r\n                \"color: red\"\r\n            );\r\n        }\r\n\r\n        for (let i = 0; i < failedExpectations.length; i++) {\r\n            const failure = failedExpectations[i];\r\n            console.log(`jasmine spec failure: ${(failure.message)}\\n%c${failure.stack.trim()}`,\r\n                \"color: orange;\"\r\n            );\r\n        }\r\n    },\r\n\r\n    suiteDone({failedExpectations, fullName, status}) {\r\n        console.groupEnd();\r\n        console.log(\r\n            `jasmine suite: ${fullName} %c- %c${status.toUpperCase()}`,\r\n            \"color: gray\",\r\n            status === \"passed\" ? \"color:green\" : status === \"pending\" ? \"color:orange\" : \"color:red\"\r\n        );\r\n        for (let i = 0; i < failedExpectations.length; i++) {\r\n            console.log(\"jasmine: suite failure: \" + failedExpectations[i].message);\r\n            console.log(failedExpectations[i].stack);\r\n        }\r\n    },\r\n\r\n    jasmineDone({overallStatus, totalTime, failedExpectations}) {\r\n        console.groupEnd();\r\n        console.log(\r\n            `jasmine: done: status %c${overallStatus}%c, total-time: %c${totalTime}ms`,\r\n            overallStatus === \"passed\" ? \"color:green\" : overallStatus === \"pending\" ? \"color:orange\" : \"color:red\",\r\n            \"color: auto\",\r\n            \"color: cornflowerblue\"\r\n        );\r\n        for (let i = 0; i < failedExpectations.length; i++) {\r\n            console.log(\"jasmine: global failure: \" + failedExpectations[i].message, failedExpectations[i].stack);\r\n        }\r\n    }\r\n\r\n}", "import consoleReporter from \"./console-reporter.js\";\r\n\r\nconst jasmineRequire = window.jasmineRequire;\r\nconst jasmine = jasmineRequire.core(jasmineRequire);\r\n\r\nconst env = jasmine.getEnv();\r\n\r\nconst jasmineInterface = jasmineRequire.interface(jasmine, env);\r\n\r\njasmineInterface.before = jasmineInterface.beforeAll;\r\njasmineInterface.after = jasmineInterface.afterAll;\r\n\r\njasmineInterface.beforeSuite = new Set();\r\njasmineInterface.afterSuite = new Set();\r\n\r\nfor (const method of [\"describe\", \"fdescribe\", \"xdescribe\"]) {\r\n    const original = jasmineInterface[method];\r\n    jasmineInterface[method] = function (description, specDefinitions) {\r\n        return original.call(this, description, function () {\r\n            const userContext = this.sharedUserContext();\r\n            try {\r\n                for (const beforeSuite of jasmineInterface.beforeSuite) {\r\n                    beforeSuite.call(this, userContext);\r\n                }\r\n                specDefinitions.apply(this);\r\n            } finally {\r\n                for (const afterSuite of jasmineInterface.afterSuite) {\r\n                    afterSuite.call(this, userContext);\r\n                }\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\njasmineInterface.beforeSuite.add(function (userContext) {\r\n    userContext.suite = Object.create(this.result);\r\n    userContext.suite.fixtures = [];\r\n});\r\n\r\nconst context = {};\r\n\r\njasmineInterface.beforeEach(function () {\r\n    context.suite = this.suite;\r\n});\r\n\r\nObject.assign(window, jasmineInterface);\r\n\r\nenv.addReporter(consoleReporter);\r\n\r\nenv.configure({\r\n    // TODO: load configuration here...\r\n});\r\n\r\nconst query = new URLSearchParams(window.location.search);\r\nif (query.has(\"spec\")) {\r\n    import((`../${query.get(\"spec\")}.spec.mjs`)).then(()=>env.execute());\r\n} else {\r\n    console.warn(\"no spec specified, please use search param 'spec' to specify a spec to run.\");\r\n}"],
  "mappings": "AAAA,GAAO,GAAQ,CAEX,eAAe,EAAW,CACtB,QAAQ,MAAM,mBAAoB,IAGtC,aAAa,EAAQ,CACjB,QAAQ,MAAM,kBAAkB,EAAO,iBAAkB,gBAG7D,YAAY,EAAQ,CAChB,QAAQ,IAAI,iBAAiB,EAAO,oBAAqB,gBAG7D,SAAS,CAAC,qBAAoB,cAAa,qBAAoB,gBAAe,UAAS,CACnF,AAAI,IAAW,UACX,QAAQ,IACJ,iBAAiB,6BAAuC,IACxD,cACA,gBACA,eAGJ,QAAQ,IACJ,iBACI,WACM,EAAmB,sBAAsB,EAAmB,gBACtE,cACA,eACA,cACA,cAIR,OAAS,GAAI,EAAG,EAAI,EAAmB,OAAQ,IAAK,CAChD,GAAM,GAAU,EAAmB,GACnC,QAAQ,IAAI,yBAA0B,EAAQ;AAAA,IAAe,EAAQ,MAAM,SACvE,oBAKZ,UAAU,CAAC,qBAAoB,WAAU,UAAS,CAC9C,QAAQ,WACR,QAAQ,IACJ,kBAAkB,WAAkB,EAAO,gBAC3C,cACA,IAAW,SAAW,cAAgB,IAAW,UAAY,eAAiB,aAElF,OAAS,GAAI,EAAG,EAAI,EAAmB,OAAQ,IAC3C,QAAQ,IAAI,2BAA6B,EAAmB,GAAG,SAC/D,QAAQ,IAAI,EAAmB,GAAG,QAI1C,YAAY,CAAC,gBAAe,YAAW,sBAAqB,CACxD,QAAQ,WACR,QAAQ,IACJ,2BAA2B,sBAAkC,MAC7D,IAAkB,SAAW,cAAgB,IAAkB,UAAY,eAAiB,YAC5F,cACA,yBAEJ,OAAS,GAAI,EAAG,EAAI,EAAmB,OAAQ,IAC3C,QAAQ,IAAI,4BAA8B,EAAmB,GAAG,QAAS,EAAmB,GAAG,SC9D3G,GAAM,GAAiB,OAAO,eACxB,EAAU,EAAe,KAAK,GAE9B,EAAM,EAAQ,SAEd,EAAmB,EAAe,UAAU,EAAS,GAE3D,EAAiB,OAAS,EAAiB,UAC3C,EAAiB,MAAQ,EAAiB,SAE1C,EAAiB,YAAc,GAAI,KACnC,EAAiB,WAAa,GAAI,KAElC,OAAW,KAAU,CAAC,WAAY,YAAa,aAAc,CACzD,GAAM,GAAW,EAAiB,GAClC,EAAiB,GAAU,SAAU,EAAa,EAAiB,CAC/D,MAAO,GAAS,KAAK,KAAM,EAAa,UAAY,CAChD,GAAM,GAAc,KAAK,oBACzB,GAAI,CACA,OAAW,KAAe,GAAiB,YACvC,EAAY,KAAK,KAAM,GAE3B,EAAgB,MAAM,aACxB,CACE,OAAW,KAAc,GAAiB,WACtC,EAAW,KAAK,KAAM,OAO1C,EAAiB,YAAY,IAAI,SAAU,EAAa,CACpD,EAAY,MAAQ,OAAO,OAAO,KAAK,QACvC,EAAY,MAAM,SAAW,KAGjC,GAAM,GAAU,GAEhB,EAAiB,WAAW,UAAY,CACpC,EAAQ,MAAQ,KAAK,QAGzB,OAAO,OAAO,OAAQ,GAEtB,EAAI,YAAY,GAEhB,EAAI,UAAU,IAId,GAAM,GAAQ,GAAI,iBAAgB,OAAO,SAAS,QAClD,AAAI,EAAM,IAAI,QACV,OAAQ,MAAM,EAAM,IAAI,oBAAqB,KAAK,IAAI,EAAI,WAE1D,QAAQ,KAAK",
  "names": []
}
